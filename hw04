Write out variables  x, y and z in binary code 
1) int8_t x = 67; x=01000011 int8_t y = -7; y=11111001   int8_t z = y - x; z=10110110
2) int8_t x = 0xd3; 溢出错误
3) uint8_t x = 0xd3; x=01100101
4) int8_t x = 127;  x= 01111111 int8_t y = -7;  y=11111001 int8_t z = y – x; 溢出错误
5) float x = 1.125; x= 1.001
6) float x = 23.0;  x= 10111.0
7) float x = 0.45;精度误差
上述代码中，哪些出现溢出错误，哪些出现精度误差。


使用维基百科，解释以下概念。
 1)Method of complements In mathematics and computing, the method of complements is a technique used to subtract one number from another using only addition of positive numbers.
 2)Byte The byte is a unit of digital information that most commonly consists of eight bits, representing a binary number. 
 3)Integer (computer science) In computer science, an integer is a datum of integral data type, a data type that represents some range of mathematical integers.
 4)Floating point In computing, floating-point arithmetic (FP) is arithmetic using formulaic representation of real numbers as an approximation so as to support a trade-off between range and precision. 
仔细阅读” Method of complements”的内容，你将注意到nines‘ complement in the decimal 和 ones’ complement in binary 等概念. 
1)请证明：二进制的负数（two‘s complement of X）等于 X 的 ones’ complement  ＋ 1（即，X每位求反加1） 
证明：在十进制中n位二进制可表示为： 
N=d1+d2×2+d3×22+⋯+dn−1×2n−2+dn×2n−1N=d1+d2×2+d3×22+⋯+dn−1×2n−2+dn×2n−1 
Negative(N)=2n−NNegative(N)=2n−N 
由等比数列求和得：1+2+22+⋯+2n−2+2n−1=1×(1−2n)1−2=2n−11+2+22+⋯+2n−2+2n−1=1×(1−2n)1−2=2n−1 
∴Negative(N)=1+2+⋯+2n−2+2n−1+1−(d1+d2×2+d3×22+⋯+dn−1×2n−2+dn×2n−1)=(1−d1)+(1−d2)×2+(1−d3)×22+⋯+(1−dn−1)×2n−2+(1−dn)×2n−1∴Negative(N)=1+2+⋯+2n−2+2n−1+1−(d1+d2×2+d3×22+⋯+dn−1×2n−2+dn×2n−1)=(1−d1)+(1−d2)×2+(1−d3)×22+⋯+(1−dn−1)×2n−2+(1−dn)×2n−1 
二进制中，d1,d2,⋯,dnd1,d2,⋯,dn非0即1 
得证：二进制的负数（two‘s complement of X）等于 X 的 ones’ 
complement ＋ 1（即，X每位求反加1）
2)Int8_t x = - 017; 请用8进制描述变量 x。在c中017即(017)8
阅读维基百科” Two‘s complement”的内容，特别是Sign extension小节内容。 
1)C程序：int8_t  x = -0x1f;  int y = x;  请用16进制描述变量 x 和 y，并说明 int y = x 的计算过程。 
x = -0x1f，转换为十进制数为-31.而-31的原码表示为1000 0000 0000 0000 0000 0000 0001 1111，最高位为符号位（1为负数，0为非负数）。保持原码符号位不变，其余为取反后再加1即可得到其补码表示1111 1111 1111 1111 1111 1111 1110 0001，然后把该二进制数转换为十六进制可得到0xffffffe1。
2)请用数学证明，为什么可以这么计算。
阅读维基百科” Floating point”的内容， 
1)   NaN 是什么？
IEEE 754 specifies a special value called "Not a Number" (NaN) to be returned as the result of certain "invalid" operations, such as 0/0, ∞×0, or sqrt(−1). In general, NaNs will be propagated i.e. most operations involving a NaN will result in a NaN, although functions that would give some defined result for any given floating-point value will do so for NaNs as well, e.g. NaN ^ 0 = 1. There are two kinds of NaNs: the default quiet NaNs and, optionally, signaling NaNs. A signaling NaN in any arithmetic operation (including numerical comparisons) will cause an "invalid" exception to be signaled. 
The representation of NaNs specified by the standard has some unspecified bits that could be used to encode the type or source of error; but there is no standard for that encoding. In theory, signaling NaNs could be used by a runtime system to flag uninitialized variables, or extend the floating-point numbers with other special values without slowing down the computations with ordinary values, although such extensions are not common. 